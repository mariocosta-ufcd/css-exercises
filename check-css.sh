#!/bin/bash

## 01

exercise_path="foundations/intro-to-css/01-css-methods"
html_file="$exercise_path/index.html"
css_file="$exercise_path/style.css"

echo "üîç Verificando exerc√≠cio 01 - M√©todos de Adicionar CSS..."

pass=true

# Verifica se o div est√° estilizado via CSS externo
if grep -E 'div *\{[^}]*background[^}]*red[^}]*color[^}]*white[^}]*font-size[^}]*32px[^}]*text-align[^}]*center[^}]*font-weight[^}]*bold' "$css_file" > /dev/null; then
  echo "‚úÖ div com CSS externo est√° correto"
else
  echo "‚ùå div com CSS externo est√° incorreto ou incompleto"
  pass=false
fi

# Verifica se h√° <style> no HTML (CSS interno)
if grep -q "<style>" "$html_file"; then
  echo "‚úÖ CSS interno presente no HTML"
else
  echo "‚ùå CSS interno n√£o encontrado no HTML"
  pass=false
fi

# Verifica se o p tem estilos via CSS interno
if grep -E '<style>.*p *\{[^}]*background[^}]*green[^}]*color[^}]*white[^}]*font-size[^}]*18px' "$html_file" -z > /dev/null; then
  echo "‚úÖ p com CSS interno est√° correto"
else
  echo "‚ùå p com CSS interno est√° incorreto ou incompleto"
  pass=false
fi

# Verifica se o button tem estilo inline
if grep -E '<button[^>]*style="[^"]*background[^"]*orange[^"]*font-size[^"]*18px' "$html_file" > /dev/null; then
  echo "‚úÖ button com estilo inline est√° correto"
else
  echo "‚ùå button com estilo inline est√° incorreto ou incompleto"
  pass=false
fi

# Resultado final
if $pass; then
  echo "üéâ Todos os testes passaram para o exerc√≠cio 01"
  exit 0
else
  echo "‚ùå Alguns testes falharam no exerc√≠cio 01"
  exit 1
fi

## 02

exercise_path="foundations/intro-to-css/02-class-id-selectors"
html_file="$exercise_path/index.html"
css_file="$exercise_path/style.css"

echo "üîç Verificando exerc√≠cio 02 - Selectores de Classe e ID..."

pass=true

# Verifica se existe uma classe partilhada entre elementos √≠mpares
if grep -q 'class="[^"]*odd[^"]*"' "$html_file"; then
  echo "‚úÖ Classe comum encontrada para elementos √≠mpares"
else
  echo "‚ùå Classe comum para elementos √≠mpares n√£o encontrada"
  pass=false
fi

# Verifica se existem IDs √∫nicos para elementos pares
if grep -q 'id="second"' "$html_file" && grep -q 'id="fourth"' "$html_file"; then
  echo "‚úÖ IDs √∫nicos encontrados para elementos pares"
else
  echo "‚ùå IDs √∫nicos para elementos pares n√£o encontrados"
  pass=false
fi

# Verifica se o terceiro elemento tem m√∫ltiplas classes
if grep -E 'class="[^"]*odd[^"]*[^"]*larger[^"]*"' "$html_file"; then
  echo "‚úÖ Terceiro elemento com m√∫ltiplas classes"
else
  echo "‚ùå Terceiro elemento n√£o tem m√∫ltiplas classes"
  pass=false
fi

# Verifica se a classe comum tem o estilo correto no CSS
if grep -E '\.odd\s*\{[^}]*background[^:]*:[^;]*#[a-fA-F0-9]{3,6}[^;]*;[^}]*font-family[^}]*Verdana' "$css_file" > /dev/null; then
  echo "‚úÖ Estilos corretos aplicados √† classe comum (√≠mpar)"
else
  echo "‚ùå Estilos ausentes ou incorretos na classe comum"
  pass=false
fi

# Verifica se o segundo elemento tem a cor e tamanho de fonte corretos
if grep -E '#second\s*\{[^}]*color[^:]*:[^;]*[^;]*;[^}]*font-size[^:]*:[^;]*36px' "$css_file" > /dev/null; then
  echo "‚úÖ Estilos corretos aplicados ao segundo elemento"
else
  echo "‚ùå Estilos ausentes ou incorretos no segundo elemento"
  pass=false
fi

# Verifica se o terceiro elemento tem tamanho 24px
if grep -E '\.larger\s*\{[^}]*font-size[^:]*:[^;]*24px' "$css_file" > /dev/null; then
  echo "‚úÖ Tamanho 24px aplicado √† classe adicional do terceiro elemento"
else
  echo "‚ùå Tamanho 24px ausente na classe do terceiro elemento"
  pass=false
fi

# Verifica se o quarto elemento est√° em negrito com fundo verde-claro
if grep -E '#fourth\s*\{[^}]*background[^:]*:[^;]*[^;]*;[^}]*font-size[^:]*:[^;]*24px[^}]*font-weight[^:]*:[^;]*bold' "$css_file" > /dev/null; then
  echo "‚úÖ Estilos corretos aplicados ao quarto elemento"
else
  echo "‚ùå Estilos ausentes ou incorretos no quarto elemento"
  pass=false
fi

# Resultado final do exerc√≠cio 2
if $pass; then
  echo "üéâ Todos os testes passaram para o exerc√≠cio 02"
else
  echo "‚ùå Alguns testes falharam no exerc√≠cio 02"
  exit 1
fi

## 03

exercise_path="foundations/intro-to-css/03-grouping-selectors"
html_file="$exercise_path/index.html"
css_file="$exercise_path/style.css"

echo "üîç Verificando exerc√≠cio 03 - Agrupar Selectores..."

pass=true

# Verifica se h√° duas classes √∫nicas nos elementos
if grep -q 'class="item1"' "$html_file" && grep -q 'class="item2"' "$html_file"; then
  echo "‚úÖ Classes √∫nicas encontradas para ambos os elementos"
else
  echo "‚ùå Faltam classes √∫nicas nos elementos"
  pass=false
fi

# Verifica se existe um seletor agrupado correto no CSS
if grep -E '\.item1,\s*\.item2\s*\{' "$css_file" > /dev/null; then
  echo "‚úÖ Selector agrupado encontrado no CSS"
else
  echo "‚ùå Selector agrupado ausente ou com sintaxe incorreta"
  pass=false
fi

# Verifica se o seletor agrupado aplica a fonte e tamanho de letra corretos
if grep -A 5 -E '\.item1,\s*\.item2\s*\{' "$css_file" | grep -q "font-family:.*Helvetica.*Times New Roman.*sans-serif" && grep -A 5 -E '\.item1,\s*\.item2\s*\{' "$css_file" | grep -q "font-size: *28px" ; then
  echo "‚úÖ Fontes e tamanho aplicados no seletor agrupado"
else
  echo "‚ùå Fontes e/ou tamanho n√£o encontrados no seletor agrupado"
  pass=false
fi

# Verifica se o item1 tem fundo preto e texto branco
if grep -A 5 '.item1' "$css_file" | grep -q "background: *black" && grep -A 5 '.item1' "$css_file" | grep -q "color: *white"; then
  echo "‚úÖ Estilos exclusivos aplicados ao item1"
else
  echo "‚ùå Estilos do item1 ausentes ou incorretos"
  pass=false
fi

# Verifica se o item2 tem fundo amarelo
if grep -A 5 '.item2' "$css_file" | grep -q "background: *yellow"; then
  echo "‚úÖ Estilo exclusivo aplicado ao item2"
else
  echo "‚ùå Estilo do item2 ausente ou incorreto"
  pass=false
fi

# Resultado final do exerc√≠cio 3
if $pass; then
  echo "üéâ Todos os testes passaram para o exerc√≠cio 03"
else
  echo "‚ùå Alguns testes falharam no exerc√≠cio 03"
  exit 1
fi

## 04

exercise_path="foundations/intro-to-css/04-chaining-selectors"
html_file="$exercise_path/index.html"
css_file="$exercise_path/style.css"

echo "üîç Verificando exerc√≠cio 04 - Chaining Selectors..."

pass=true

# Verifica se os seletores encadeados est√£o presentes
if grep -q '\.avatar\.proportioned' "$css_file"; then
  echo "‚úÖ Selector encadeado .avatar.proportioned encontrado"
else
  echo "‚ùå Selector .avatar.proportioned n√£o encontrado"
  pass=false
fi

if grep -q '\.avatar\.distorted' "$css_file"; then
  echo "‚úÖ Selector encadeado .avatar.distorted encontrado"
else
  echo "‚ùå Selector .avatar.distorted n√£o encontrado"
  pass=false
fi

# Verifica se a largura est√° correta para ambos
if grep -A 5 '\.avatar\.proportioned' "$css_file" | grep -q 'width: *300px'; then
  echo "‚úÖ Largura correta para .avatar.proportioned"
else
  echo "‚ùå Largura incorreta para .avatar.proportioned"
  pass=false
fi

if grep -A 5 '\.avatar\.distorted' "$css_file" | grep -q 'width: *200px'; then
  echo "‚úÖ Largura correta para .avatar.distorted"
else
  echo "‚ùå Largura incorreta para .avatar.distorted"
  pass=false
fi

# Verifica se a altura da imagem proporcionada √© autom√°tica
if grep -A 5 '\.avatar\.proportioned' "$css_file" | grep -q 'height: *auto'; then
  echo "‚úÖ Altura proporcional para .avatar.proportioned"
else
  echo "‚ùå Altura incorreta (esperado: auto) para .avatar.proportioned"
  pass=false
fi

# Verifica se a altura da imagem distorcida √© fixa
if grep -A 5 '\.avatar\.distorted' "$css_file" | grep -q 'height: *400px'; then
  echo "‚úÖ Altura fixa correta para .avatar.distorted"
else
  echo "‚ùå Altura incorreta para .avatar.distorted (esperado: 400px)"
  pass=false
fi

# Resultado final do exerc√≠cio 4
if $pass; then
  echo "üéâ Todos os testes passaram para o exerc√≠cio 04"
else
  echo "‚ùå Alguns testes falharam no exerc√≠cio 04"
  exit 1
fi

## 05

exercise_path="foundations/intro-to-css/05-descendant-combinators"
html_file="$exercise_path/index.html"
css_file="$exercise_path/style.css"

echo "üîç Verificando exerc√≠cio 05 - Descendant Combinator..."

pass=true

# Verifica se h√° um selector com combinador de descend√™ncia (ex: div p)
if grep -E -q 'div[[:space:]]+p' "$css_file"; then
  echo "‚úÖ Selector descendente 'div p' encontrado"
else
  echo "‚ùå Selector descendente 'div p' n√£o encontrado"
  pass=false
fi

# Verifica as propriedades dentro do selector
if grep -A 5 'div[[:space:]]\+p' "$css_file" | grep -q 'background-color: *yellow'; then
  echo "‚úÖ Fundo amarelo aplicado"
else
  echo "‚ùå Fundo amarelo n√£o encontrado"
  pass=false
fi

if grep -A 5 'div[[:space:]]\+p' "$css_file" | grep -q 'color: *red'; then
  echo "‚úÖ Cor de texto vermelha aplicada"
else
  echo "‚ùå Cor de texto vermelha n√£o encontrada"
  pass=false
fi

if grep -A 5 'div[[:space:]]\+p' "$css_file" | grep -q 'font-size: *20px'; then
  echo "‚úÖ Tamanho de fonte 20px aplicado"
else
  echo "‚ùå Tamanho da fonte incorreto"
  pass=false
fi

if grep -A 5 'div[[:space:]]\+p' "$css_file" | grep -q 'text-align: *center'; then
  echo "‚úÖ Alinhamento centrado aplicado"
else
  echo "‚ùå Alinhamento centrado n√£o encontrado"
  pass=false
fi

# Resultado final
if $pass; then
  echo "üéâ Todos os testes passaram para o exerc√≠cio 05"
else
  echo "‚ùå Alguns testes falharam no exerc√≠cio 05"
  exit 1
fi

## Block and Inline 01


exercise_path="foundations/block-and-inline/01-margin-and-paddin-1"
html_file="$exercise_path/index.html"
css_file="$exercise_path/style.css"

pass=true
echo "üîç Verificando exerc√≠cio 01 - Margin e Padding..."

# Verifica se a margin da div.one √© 12px
if ! grep -E "\.one\s*\{[^}]*margin\s*:\s*12px" "$css_file" > /dev/null; then
  echo "‚ùå .one n√£o tem margin: 12px"
  pass=false
fi

# Verifica se padding da div.one √© 32px
if ! grep -E "\.one\s*\{[^}]*padding\s*:\s*32px" "$css_file" > /dev/null; then
  echo "‚ùå .one n√£o tem padding: 32px"
  pass=false
fi

# Verifica se padding da div.three √© 32px
if ! grep -E "\.three\s*\{[^}]*padding\s*:\s*32px" "$css_file" > /dev/null; then
  echo "‚ùå .three n√£o tem padding: 32px"
  pass=false
fi

# Verifica se div.three tem margin-left: auto e margin-right: 0 (alinhado √† direita)
if ! grep -E "\.three\s*\{[^}]*margin-left\s*:\s*auto[^}]*margin-right\s*:\s*0" "$css_file" > /dev/null; then
  echo "‚ùå .three n√£o est√° corretamente alinhado √† direita com margin"
  pass=false
fi

# Verifica se h√° 48px entre div.two e div.three (tanto margin-top como margin-bottom v√°lidos)
if ! grep -E "\.two\s*\{[^}]*margin-bottom\s*:\s*48px" "$css_file" > /dev/null && \
   ! grep -E "\.three\s*\{[^}]*margin-top\s*:\s*48px" "$css_file" > /dev/null; then
  echo "‚ùå N√£o foi encontrado espa√ßo de 48px entre .two e .three"
  pass=false
fi

if $pass; then
  echo "‚úÖ Teste 01-margin-and-padding-1 passou!"
else
  echo "‚ùå Teste 01-margin-and-padding-1 falhou!"
  exit 1
fi

## Block and Inline 02


exercise_path="foundations/block-and-inline/02-margin-and-paddin-2"
html_file="$exercise_path/index.html"
css_file="$exercise_path/style.css"

pass=true

pass=true
echo "üîç Verificando exerc√≠cio 02 - Margin e Padding #2..."

# Verifica padding de 8px no .card
if ! grep -E "\.card\s*\{[^}]*padding\s*:\s*8px" "$css_file" > /dev/null; then
  echo "‚ùå .card n√£o tem padding: 8px"
  pass=false
fi

# Verifica font-size 16px e padding 8px no .title
if ! grep -E "\.title\s*\{[^}]*font-size\s*:\s*16px" "$css_file" > /dev/null; then
  echo "‚ùå .title n√£o tem font-size: 16px"
  pass=false
fi

if ! grep -E "\.title\s*\{[^}]*padding\s*:\s*8px" "$css_file" > /dev/null; then
  echo "‚ùå .title n√£o tem padding: 8px"
  pass=false
fi

# Verifica padding 16px top/bottom e 8px left/right no .content
if ! grep -E "\.content\s*\{[^}]*padding\s*:\s*16px\s+8px" "$css_file" > /dev/null && \
   ! grep -E "\.content\s*\{[^}]*padding\s*:\s*8px\s+16px" "$css_file" > /dev/null; then
  echo "‚ùå .content n√£o tem padding correto (16px vertical, 8px horizontal)"
  pass=false
fi

# Verifica centraliza√ß√£o e padding na .button-container
if ! grep -E "\.button-container\s*\{[^}]*text-align\s*:\s*center" "$css_file" > /dev/null; then
  echo "‚ùå .button-container n√£o est√° centrada com text-align: center"
  pass=false
fi

if ! grep -E "\.button-container\s*\{[^}]*padding\s*:\s*8px" "$css_file" > /dev/null; then
  echo "‚ùå .button-container n√£o tem padding: 8px"
  pass=false
fi

# Verifica padding do bot√£o grande (24px lateral, 8px vertical)
if ! grep -E "button\s*\{[^}]*padding\s*:\s*8px\s+24px" "$css_file" > /dev/null; then
  echo "‚ùå O bot√£o n√£o tem padding: 8px 24px"
  pass=false
fi

if $pass; then
  echo "‚úÖ Teste 02-margin-and-padding-2 passou!"
else
  echo "‚ùå Teste 02-margin-and-padding-2 falhou!"
  exit 1
fi

## Cascade Fix

exercise_path="foundations/cascade/01-cascade-fix"
html_file="$exercise_path/index.html"
css_file="$exercise_path/style.css"

echo "üîç Verificando exerc√≠cio 01 - Corrigir a Cascata..."

pass=true

# Verifica que o HTML n√£o foi alterado (por exemplo, n√£o foi removido um bot√£o ou classe esperada)
if ! grep -q '<button class="button secondary">' "$html_file"; then
  echo "‚ùå Estrutura esperada do HTML foi alterada (classe .button secondary em falta)"
  pass=false
else
  echo "‚úÖ HTML mant√©m a estrutura esperada"
fi

# Verifica se as regras esperadas est√£o aplicadas ‚Äî exemplo (ajustar conforme o CSS real):
# Espera-se que .button.secondary tenha cor de fundo azul e texto branco
if grep -A 5 '\.button\.secondary' "$css_file" | grep -q 'background: *blue' && \
   grep -A 5 '\.button\.secondary' "$css_file" | grep -q 'color: *white'; then
  echo "‚úÖ Estilo correto aplicado ao bot√£o secund√°rio"
else
  echo "‚ùå Estilo do bot√£o secund√°rio incorreto (esperado: fundo azul, texto branco)"
  pass=false
fi

# Espera-se que .text em .container tenha font-weight bold ‚Äî ajusta isto ao conte√∫do real
if grep -A 5 '\.container .text' "$css_file" | grep -q 'font-weight: *bold'; then
  echo "‚úÖ Texto com font-weight bold corretamente aplicado"
else
  echo "‚ùå font-weight: bold n√£o aplicado corretamente ao texto"
  pass=false
fi

# Resultado final
if $pass; then
  echo "üéâ Todos os testes passaram para o exerc√≠cio 01-cascade-fix"
else
  echo "‚ùå Alguns testes falharam no exerc√≠cio 01-cascade-fix"
  exit 1
fi

## Flexbox 01 - Flex Center

exercise_path="foundations/flex/01-flex-center"
html_file="$exercise_path/index.html"
css_file="$exercise_path/style.css"

echo "üîç Verificando exerc√≠cio 01 - Flex Center..."

pass=true

# Verifica se o container tem display flex
if grep -A 5 '.container' "$css_file" | grep -q 'display: *flex'; then
  echo "‚úÖ display: flex aplicado ao container"
else
  echo "‚ùå display: flex n√£o encontrado no container"
  pass=false
fi

# Verifica se h√° centraliza√ß√£o com justify-content e align-items
if grep -A 5 '.container' "$css_file" | grep -q 'justify-content: *center'; then
  echo "‚úÖ justify-content: center aplicado"
else
  echo "‚ùå justify-content: center ausente"
  pass=false
fi

if grep -A 5 '.container' "$css_file" | grep -q 'align-items: *center'; then
  echo "‚úÖ align-items: center aplicado"
else
  echo "‚ùå align-items: center ausente"
  pass=false
fi

# Verifica se n√£o h√° uso de margin ou position que ajude a centrar o .box (opcional para garantir s√≥ Flexbox)
if grep -A 5 '.box' "$css_file" | grep -E -q 'margin|position'; then
  echo "‚ùå Estilos de margin/position encontrados no .box ‚Äî usar apenas Flexbox"
  pass=false
else
  echo "‚úÖ Nenhum estilo externo usado no .box (apenas Flexbox)"
fi

# Resultado final
if $pass; then
  echo "üéâ Todos os testes passaram para o exerc√≠cio 01-flex-center"
else
  echo "‚ùå Alguns testes falharam no exerc√≠cio 01-flex-center"
  exit 1
fi

## Flexbox 02 - Flex Header

exercise_path="foundations/flex/02-flex-header"
html_file="$exercise_path/index.html"
css_file="$exercise_path/style.css"

echo "üîç Verificando exerc√≠cio 02 - Flex Header..."

pass=true

# Verifica se o header usa display: flex
if grep -A 5 'header' "$css_file" | grep -q 'display: *flex'; then
  echo "‚úÖ display: flex aplicado ao header"
else
  echo "‚ùå display: flex n√£o encontrado no header"
  pass=false
fi

# Verifica se justify-content √© usado (provavelmente space-between)
if grep -A 5 'header' "$css_file" | grep -E -q 'justify-content: *(space-between|space-around|space-evenly)'; then
  echo "‚úÖ justify-content correto aplicado ao header"
else
  echo "‚ùå justify-content ausente ou incorreto no header"
  pass=false
fi

# Verifica se align-items centraliza verticalmente
if grep -A 5 'header' "$css_file" | grep -q 'align-items: *center'; then
  echo "‚úÖ align-items: center aplicado ao header"
else
  echo "‚ùå align-items: center ausente no header"
  pass=false
fi

# Verifica se os links (ul) est√£o com flex horizontal
if grep -A 5 'ul' "$css_file" | grep -q 'display: *flex'; then
  echo "‚úÖ display: flex aplicado √†s listas (ul)"
else
  echo "‚ùå As listas (ul) n√£o est√£o com display: flex"
  pass=false
fi

# Verifica se os elementos listados t√™m o margin/padding removido
if grep -A 5 'ul' "$css_file" | grep -q 'margin: *0' && grep -A 5 'ul' "$css_file" | grep -q 'padding: *0'; then
  echo "‚úÖ Margin e padding removidos do ul"
else
  echo "‚ùå Margin ou padding do ul n√£o foram removidos"
  pass=false
fi

# Verifica se n√£o h√° uso de floats, inline-block ou position:absolute
if grep -qE 'float|inline-block|position: *absolute' "$css_file"; then
  echo "‚ùå Encontrado uso de float, inline-block ou position:absolute ‚Äî n√£o permitido"
  pass=false
else
  echo "‚úÖ Sem uso de float, inline-block ou position:absolute (correto)"
fi

# Resultado final
if $pass; then
  echo "üéâ Todos os testes passaram para o exerc√≠cio 02-flex-header"
else
  echo "‚ùå Alguns testes falharam no exerc√≠cio 02-flex-header"
  exit 1
fi


## Flexbox 03 - Flex Header 2

exercise_path="foundations/flex/03-flex-header-2"
html_file="$exercise_path/index.html"
css_file="$exercise_path/style.css"

echo "üîç Verificando exerc√≠cio 03 - Flex Header 2..."

pass=true

# Verifica se o header tem display flex e centraliza√ß√£o vertical
if grep -A 5 'header' "$css_file" | grep -q 'display: *flex'; then
  echo "‚úÖ display: flex aplicado ao header"
else
  echo "‚ùå display: flex n√£o encontrado no header"
  pass=false
fi

if grep -A 5 'header' "$css_file" | grep -q 'align-items: *center'; then
  echo "‚úÖ align-items: center aplicado ao header"
else
  echo "‚ùå align-items: center ausente no header"
  pass=false
fi

# Verifica se h√° containers para os lados esquerdo e direito com display: flex
if grep -q 'class="left-links"' "$html_file" && grep -A 5 '.left-links' "$css_file" | grep -q 'display: *flex'; then
  echo "‚úÖ Container .left-links com display: flex"
else
  echo "‚ùå Container .left-links ausente ou sem display: flex"
  pass=false
fi

if grep -q 'class="right-links"' "$html_file" && grep -A 5 '.right-links' "$css_file" | grep -q 'display: *flex'; then
  echo "‚úÖ Container .right-links com display: flex"
else
  echo "‚ùå Container .right-links ausente ou sem display: flex"
  pass=false
fi

# Verifica se h√° gap de 16px entre itens dentro de left/right-links (gap ou margin-right, por exemplo)
if grep -A 5 '.left-links' "$css_file" | grep -q 'gap: *16px'; then
  echo "‚úÖ Gap de 16px aplicado aos itens de .left-links"
else
  echo "‚ö†Ô∏è Gap de 16px n√£o identificado explicitamente em .left-links (verifica se foi feito com margin)"
fi

if grep -A 5 '.right-links' "$css_file" | grep -q 'gap: *16px'; then
  echo "‚úÖ Gap de 16px aplicado aos itens de .right-links"
else
  echo "‚ö†Ô∏è Gap de 16px n√£o identificado explicitamente em .right-links (verifica se foi feito com margin)"
fi

# Verifica se h√° padding geral no header (8px para afastar do edge)
if grep -A 5 'header' "$css_file" | grep -q 'padding: *8px'; then
  echo "‚úÖ Padding de 8px aplicado ao header"
else
  echo "‚ùå Padding de 8px ausente no header"
  pass=false
fi

# Resultado final
if $pass; then
  echo "üéâ Todos os testes passaram para o exerc√≠cio 03-flex-header-2"
else
  echo "‚ùå Alguns testes falharam no exerc√≠cio 03-flex-header-2"
  exit 1
fi


## Flexbox 04 - Flex Information

exercise_path="foundations/flex/04-flex-information"
html_file="$exercise_path/index.html"
css_file="$exercise_path/style.css"

echo "üîç Verificando exerc√≠cio 04 - Flex Information..."

pass=true

# Verifica se o container principal dos items tem display flex e alinhamento horizontal
if grep -q 'class="info-container"' "$html_file" && grep -A 5 '.info-container' "$css_file" | grep -q 'display: *flex'; then
  echo "‚úÖ .info-container com display: flex"
else
  echo "‚ùå .info-container ausente ou sem display: flex"
  pass=false
fi

# Verifica se os itens t√™m largura de 200px
if grep -A 5 '.info-item' "$css_file" | grep -q 'width: *200px'; then
  echo "‚úÖ Largura de 200px aplicada aos itens"
else
  echo "‚ùå Largura de 200px n√£o encontrada nos itens"
  pass=false
fi

# Verifica se o texto est√° centrado nos itens
if grep -A 5 '.info-item' "$css_file" | grep -q 'text-align: *center'; then
  echo "‚úÖ Texto dos itens centrado"
else
  echo "‚ùå Texto dos itens n√£o est√° centrado"
  pass=false
fi

# Verifica se os itens est√£o espa√ßados entre si (gap de 52px ou equivalente)
if grep -A 5 '.info-container' "$css_file" | grep -q 'gap: *52px'; then
  echo "‚úÖ Espa√ßamento entre itens (gap de 52px) aplicado"
else
  echo "‚ö†Ô∏è gap: 52px n√£o encontrado ‚Äî verificar se foi aplicado com margin nos itens"
fi

# Verifica se o t√≠tulo est√° centrado (text-align ou flex)
if grep -A 5 '.title' "$css_file" | grep -q 'text-align: *center'; then
  echo "‚úÖ T√≠tulo centrado"
else
  echo "‚ùå T√≠tulo n√£o est√° centrado"
  pass=false
fi

# Verifica se h√° espa√ßo de 32px entre o t√≠tulo e os itens
if grep -A 5 '.title' "$css_file" | grep -q 'margin-bottom: *32px'; then
  echo "‚úÖ Espa√ßo de 32px entre o t√≠tulo e os itens"
else
  echo "‚ö†Ô∏è Espa√ßo entre o t√≠tulo e os itens n√£o encontrado como margin-bottom: 32px"
fi

# Resultado final
if $pass; then
  echo "üéâ Todos os testes passaram para o exerc√≠cio 04-flex-information"
else
  echo "‚ùå Alguns testes falharam no exerc√≠cio 04-flex-information"
  exit 1
fi


## Flexbox 05 - Flex Modal

exercise_path="foundations/flex/05-flex-modal"
html_file="$exercise_path/index.html"
css_file="$exercise_path/style.css"

echo "üîç Verificando exerc√≠cio 05 - Flex Modal..."

pass=true

# Verifica se o container principal usa display flex
if grep -A 5 '.modal' "$css_file" | grep -q 'display: *flex'; then
  echo "‚úÖ display: flex aplicado √† .modal"
else
  echo "‚ùå display: flex n√£o encontrado na .modal"
  pass=false
fi

# Verifica se o √≠cone azul est√° √† esquerda e n√£o encolhe
if grep -A 5 '.icon' "$css_file" | grep -q 'flex-shrink: *0'; then
  echo "‚úÖ .icon est√° protegido contra encolhimento (flex-shrink: 0)"
else
  echo "‚ö†Ô∏è .icon pode estar a encolher ‚Äî considera usar flex-shrink: 0"
fi

# Verifica se h√° padding interno na modal
if grep -A 5 '.modal' "$css_file" | grep -q 'padding: '; then
  echo "‚úÖ Padding aplicado ao .modal"
else
  echo "‚ùå Padding n√£o encontrado no .modal"
  pass=false
fi

# Verifica se header e bot√£o de fechar est√£o no mesmo n√≠vel e alinhados com flex
if grep -q 'class="modal-header"' "$html_file" && grep -A 5 '.modal-header' "$css_file" | grep -q 'display: *flex'; then
  echo "‚úÖ .modal-header com display: flex"
else
  echo "‚ùå .modal-header ausente ou sem display: flex"
  pass=false
fi

if grep -A 5 '.modal-header' "$css_file" | grep -q 'justify-content: *space-between'; then
  echo "‚úÖ justify-content: space-between aplicado √† .modal-header"
else
  echo "‚ö†Ô∏è .modal-header pode n√£o estar a espa√ßar corretamente o t√≠tulo e o bot√£o"
fi

# Verifica se o t√≠tulo est√° em negrito e com tamanho maior que o texto
if grep -A 5 '.modal-title' "$css_file" | grep -q 'font-weight: *bold'; then
  echo "‚úÖ T√≠tulo com font-weight: bold"
else
  echo "‚ùå T√≠tulo n√£o est√° em negrito"
  pass=false
fi

if grep -A 5 '.modal-title' "$css_file" | grep -q 'font-size: *[2-9][0-9]px'; then
  echo "‚úÖ Tamanho de fonte maior aplicado ao t√≠tulo"
else
  echo "‚ö†Ô∏è Tamanho de fonte do t√≠tulo pode n√£o ser suficientemente maior"
fi

# Resultado final
if $pass; then
  echo "üéâ Todos os testes passaram para o exerc√≠cio 05-flex-modal"
else
  echo "‚ùå Alguns testes falharam no exerc√≠cio 05-flex-modal"
  exit 1
fi

## Flexbox 06 - Flex Layout

exercise_path="foundations/flex/06-flex-layout"
html_file="$exercise_path/index.html"
css_file="$exercise_path/style.css"

echo "üîç Verificando exerc√≠cio 06 - Flex Layout..."

pass=true

# Verifica se o body √© um flex container em coluna com 100vh
if grep -A 5 'body' "$css_file" | grep -q 'display: *flex' && \
   grep -A 5 'body' "$css_file" | grep -q 'flex-direction: *column'; then
  echo "‚úÖ body com display: flex e flex-direction: column"
else
  echo "‚ùå O body n√£o tem display: flex em coluna"
  pass=false
fi

# Verifica se o footer tem background cinzento claro
if grep -A 5 'footer' "$css_file" | grep -q 'background.*#eeeeee'; then
  echo "‚úÖ footer com fundo #eeeeee"
else
  echo "‚ùå footer n√£o tem o fundo #eeeeee"
  pass=false
fi

# Verifica se o header e footer t√™m padding
if grep -A 5 'header' "$css_file" | grep -q 'padding'; then
  echo "‚úÖ padding aplicado ao header"
else
  echo "‚ùå header sem padding"
  pass=false
fi

if grep -A 5 'footer' "$css_file" | grep -q 'padding'; then
  echo "‚úÖ padding aplicado ao footer"
else
  echo "‚ùå footer sem padding"
  pass=false
fi

# Verifica se os links s√£o distribu√≠dos nas extremidades (provavelmente com justify-content: space-between)
if grep -A 5 'header' "$css_file" | grep -E -q 'justify-content: *(space-between|space-around|space-evenly)'; then
  echo "‚úÖ links no header distribu√≠dos corretamente"
else
  echo "‚ùå links no header n√£o est√£o distribu√≠dos corretamente"
  pass=false
fi

if grep -A 5 'footer' "$css_file" | grep -E -q 'justify-content: *(space-between|space-around|space-evenly)'; then
  echo "‚úÖ links no footer distribu√≠dos corretamente"
else
  echo "‚ùå links no footer n√£o est√£o distribu√≠dos corretamente"
  pass=false
fi

# Verifica se o main tem conte√∫do centrado (logo, input, buttons)
if grep -A 5 'main' "$css_file" | grep -q 'align-items: *center' && grep -A 5 'main' "$css_file" | grep -q 'justify-content: *center'; then
  echo "‚úÖ Conte√∫do centralizado no main"
else
  echo "‚ùå Conte√∫do n√£o est√° centralizado no main"
  pass=false
fi

# Verifica se h√° padding nos bot√µes
if grep -E 'button\s*\{[^}]*padding\s*:' "$css_file" > /dev/null; then
  echo "‚úÖ padding aplicado aos bot√µes"
else
  echo "‚ùå Bot√µes sem padding"
  pass=false
fi

# Verifica se h√° espa√ßo entre o logo, input e bot√µes (gap ou margin)
if grep -A 5 'main' "$css_file" | grep -q 'gap:'; then
  echo "‚úÖ Espa√ßamento entre elementos aplicado via gap"
elif grep -q 'class="logo"' "$html_file" && grep -A 5 '.logo' "$css_file" | grep -q 'margin-bottom'; then
  echo "‚úÖ Espa√ßamento aplicado com margin entre os elementos"
else
  echo "‚ö†Ô∏è Espa√ßamento entre logo, input e bot√µes n√£o identificado"
fi

# Resultado final
if $pass; then
  echo "üéâ Todos os testes passaram para o exerc√≠cio 06-flex-layout"
else
  echo "‚ùå Alguns testes falharam no exerc√≠cio 06-flex-layout"
  exit 1
fi


## Flexbox 07 - Flex Layout 2 (Holy Grail)

exercise_path="foundations/flex/07-flex-layout-2"
html_file="$exercise_path/index.html"
css_file="$exercise_path/style.css"

echo "üîç Verificando exerc√≠cio 07 - Holy Grail Layout..."

pass=true

# Verifica se o header tem font-size 32px e font-weight 900
if grep -A 5 'header' "$css_file" | grep -q 'font-size: *32px' && grep -A 5 'header' "$css_file" | grep -q 'font-weight: *900'; then
  echo "‚úÖ Header com font-size 32px e font-weight 900"
else
  echo "‚ùå Header n√£o tem os estilos esperados (font-size: 32px, font-weight: 900)"
  pass=false
fi

# Verifica se o header tem padding de 16px
if grep -A 5 'header' "$css_file" | grep -q 'padding: *16px'; then
  echo "‚úÖ Padding de 16px aplicado ao header"
else
  echo "‚ùå Header n√£o tem padding de 16px"
  pass=false
fi

# Verifica se o layout principal tem flex-direction: column (para empurrar o footer para baixo)
if grep -A 5 'body' "$css_file" | grep -q 'display: *flex' && \
   grep -A 5 'body' "$css_file" | grep -q 'flex-direction: *column'; then
  echo "‚úÖ body com flex-direction: column"
else
  echo "‚ùå body n√£o tem display: flex em coluna"
  pass=false
fi

# Verifica se o footer est√° centrado horizontal e verticalmente
if grep -A 5 'footer' "$css_file" | grep -q 'display: *flex' && \
   grep -A 5 'footer' "$css_file" | grep -q 'justify-content: *center' && \
   grep -A 5 'footer' "$css_file" | grep -q 'align-items: *center'; then
  echo "‚úÖ Footer centrado horizontal e verticalmente"
else
  echo "‚ùå Footer n√£o est√° corretamente centrado"
  pass=false
fi

# Verifica se a sidebar tem largura fixa e n√£o encolhe
if grep -A 5 '.sidebar' "$css_file" | grep -q 'width: *300px' && \
   grep -A 5 '.sidebar' "$css_file" | grep -q 'flex-shrink: *0'; then
  echo "‚úÖ Sidebar com largura fixa e sem encolher"
else
  echo "‚ùå Sidebar n√£o tem largura fixa de 300px ou pode encolher"
  pass=false
fi

# Verifica estilo dos links da sidebar
if grep -A 5 '.sidebar' "$css_file" | grep -q 'font-size: *24px' && \
   grep -A 5 '.sidebar' "$css_file" | grep -q 'text-decoration: *none' && \
   grep -A 5 '.sidebar' "$css_file" | grep -q 'color: *white'; then
  echo "‚úÖ Estilo correto aplicado aos links da sidebar"
else
  echo "‚ùå Os links da sidebar n√£o t√™m o estilo correto (tamanho, cor ou sublinhado)"
  pass=false
fi

# Verifica se h√° padding de 16px na sidebar
if grep -A 5 '.sidebar' "$css_file" | grep -q 'padding: *16px'; then
  echo "‚úÖ Padding de 16px aplicado √† sidebar"
else
  echo "‚ùå Sidebar sem padding de 16px"
  pass=false
fi

# Verifica se a sec√ß√£o de cards tem padding de 48px
if grep -A 5 '.cards' "$css_file" | grep -q 'padding: *48px'; then
  echo "‚úÖ Padding de 48px aplicado √† sec√ß√£o .cards"
else
  echo "‚ùå Padding de 48px ausente na .cards"
  pass=false
fi

# Verifica se os cards est√£o em layout flex com wrap
if grep -A 5 '.cards' "$css_file" | grep -q 'display: *flex' && \
   grep -A 5 '.cards' "$css_file" | grep -q 'flex-wrap: *wrap'; then
  echo "‚úÖ Cards com layout flex e flex-wrap"
else
  echo "‚ùå Cards n√£o est√£o em flex ou falta flex-wrap"
  pass=false
fi

# Verifica se os cards t√™m largura definida (necess√°ria para wrap funcionar)
if grep -A 5 '.card' "$css_file" | grep -q 'width: '; then
  echo "‚úÖ Largura definida nos .card (necess√°ria para wrap)"
else
  echo "‚ùå Os .card n√£o t√™m largura definida"
  pass=false
fi

# Resultado final
if $pass; then
  echo "üéâ Todos os testes passaram para o exerc√≠cio 07-flex-layout-2"
else
  echo "‚ùå Alguns testes falharam no exerc√≠cio 07-flex-layout-2"
  exit 1
fi
